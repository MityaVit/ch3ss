import { useState } from "react";
import { Modal } from "../helpers/modal";
import { sendEmailConfirmation, sendPasswordRecoveryLink, createUser, authUser } from "../../api";

export const AuthModal = ({ isOpen, onClose }) => {
  if (!isOpen) return null;

  const inputClass =
    "p-[1vh] w-full bg-[#505050] text-white rounded-md outline-none border border-[#6a6a6a] focus:border-[#818181] focus:bg-[#585858] transition-all";
  const disabledButtonClass =
    "bg-[#505050] text-[#818181] cursor-not-allowed transition-none";
  const enabledButtonClass =
    "bg-gradient-to-r from-green-500 via-blue-400 to-purple-500 text-white ring-blue-300 ring-[0.1vh]";
  const baseButtonClass =
    "p-[1.2vh] w-full rounded-md font-semibold transition-all";

  const [currentView, setCurrentView] = useState("login"); // 'login', 'register', 'forgotPassword'
  const [registrationMessage, setRegistrationMessage] = useState("");

  const [loginFormData, setLoginFormData] = useState({
    email: "",
    password: "",
  });

  const [isLoading, setIsLoading] = useState(false);

  const [registerFormData, setRegisterFormData] = useState({
    username: "",
    password: "",
    email: "",
    confirmPassword: "",
    role: "Student",
  });

  const [recoveryFormData, setRecoveryFormData] = useState({
    email: "",
  });

  const [showPassword, setShowPassword] = useState(false);
  const [error, setError] = useState("");
  const [recoverySuccess, setRecoverySuccess] = useState("");

  const handleLoginFormInputChange = (e) => {
    const { name, value } = e.target;
    setLoginFormData({ ...loginFormData, [name]: value });
  };

  const handleRecoveryFormInputChange = (e) => {
    const { name, value } = e.target;
    setRecoveryFormData({ ...recoveryFormData, [name]: value });
  };

  const handleRegisterFormInputChange = (e) => {
    const { name, value } = e.target;
    setRegisterFormData({ ...registerFormData, [name]: value });
  };

  const handleLoginFormSubmit = async (e) => {
    e.preventDefault();
    setError("");
    setIsLoading(true);
    try {
      const response = await authUser(loginFormData);
      if (response.status === 200) {
        onClose();
        window.location.reload();
      }
    } catch (error) {
      setError(error.message);
    } finally {
      setIsLoading(false);
    }
  };

  const handleRecoveryFormSubmit = async (e) => {
    e.preventDefault();
    setError("");
    setRecoverySuccess("");
    setIsLoading(true);
    try {
      await sendPasswordRecoveryLink(recoveryFormData.email);
      setRecoverySuccess(
        `–°—Å—ã–ª–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø–æ—á—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å ${recoveryFormData.email}, –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å –Ω–∏–º`
      );
    } catch (error) {
      setError(error.message);
    } finally {
      setIsLoading(false);
    }
  };

  const handleRegisterFormSubmit = async (e) => {
    e.preventDefault();
    setError("");
    if (registerFormData.password !== registerFormData.confirmPassword) {
      setError("–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç.");
      return;
    }
    setIsLoading(true);
    try {
      const response = await createUser(registerFormData);
      if (response.status === 201) {
        await sendEmailConfirmation(registerFormData.email);
        setRegistrationMessage(
          "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—É—é –≤–∞–º–∏ –ø–æ—á—Ç—É. –ù–∞ –Ω–µ—ë –¥–æ–ª–∂–Ω–æ –ø—Ä–∏–π—Ç–∏ –ø–∏—Å—å–º–æ —Å —Å—Å—ã–ª–∫–æ–π –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞."
        );
      }
    } catch (error) {
      setError(error.message);
    } finally {
      setIsLoading(false);
    }
  };

  const handleCurrentViewChange = (view) => {
    setCurrentView(view);
    setError("");
    setRecoverySuccess("");
    setRegistrationMessage("");
    setLoginFormData({
      email: "",
      password: "",
    });
    setRegisterFormData({
      username: "",
      password: "",
      email: "",
      confirmPassword: "",
      role: "Student",
    });
    setRecoveryFormData({
      email: "",
    });
    setShowPassword(false);
  };

  const isLoginFormComplete = Object.values(loginFormData).every(
    (value) => value.trim() !== ""
  );
  const isRecoveryFormComplete = Object.values(recoveryFormData).every(
    (value) => value.trim() !== ""
  );
  const isRegisterFormComplete = Object.values(registerFormData).every(
    (value) => value.trim() !== ""
  );

  const renderLoginForm = () => (
    <form className="flex flex-col gap-[2.5vh] text-[1.8vh] p-[1vw]" onSubmit={handleLoginFormSubmit}>
      <label className="flex flex-col gap-[0.5vh]">
        <span className="text-[#d3d3d3] font-semibold">–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞</span>
        <input
          type="email"
          name="email"
          value={loginFormData.email}
          onChange={handleLoginFormInputChange}
          placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É"
          className={inputClass}
          required
        />
      </label>

      <label className="flex flex-col gap-[0.5vh]">
        <span className="text-[#d3d3d3] font-semibold">–ü–∞—Ä–æ–ª—å</span>
        <div className="relative">
          <input
            type={showPassword ? "text" : "password"}
            name="password"
            value={loginFormData.password}
            onChange={handleLoginFormInputChange}
            placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å"
            className={inputClass}
            required
          />
          <span
            className="absolute top-1/2 right-[1vh] -translate-y-1/2 cursor-pointer text-white text-[1.8vh] select-none"
            onMouseDown={() => setShowPassword(true)}
            onMouseUp={() => setShowPassword(false)}
            onMouseLeave={() => setShowPassword(false)}
            onTouchStart={() => setShowPassword(true)}
            onTouchEnd={() => setShowPassword(false)}
          >
            {showPassword ? "üôâ" : "üôà"}
          </span>
        </div>
      </label>

      <button
        disabled={isLoading}
        type="submit"
        className={`${baseButtonClass} ${
          isLoading
            ? disabledButtonClass
            : isLoginFormComplete
            ? enabledButtonClass
            : disabledButtonClass
        }`}
      >
        –í–æ–π—Ç–∏
      </button>

      <div className="flex justify-between text-[1.7vh] text-[#aaaaaa]">
        <span
          className="hover:text-[#c4c4c4] cursor-pointer"
          onClick={() => handleCurrentViewChange("recovery")}
        >
          –ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å?
        </span>
        <span
          className="hover:text-[#c4c4c4] cursor-pointer"
          onClick={() => handleCurrentViewChange("register")}
        >
          –ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞?
        </span>
      </div>
    </form>
  );

  const renderRegisterForm = () => {
    if (registrationMessage) {
      return (
        <div className="flex flex-col gap-[2.5vh] text-[1.8vh] p-[1vw]">
          <div className="text-green-500 text-[1.7vh]">{registrationMessage}</div>
          <span
            className="hover:text-[#c4c4c4] cursor-pointer text-[1.7vh] text-[#818181]"
            onClick={() => handleCurrentViewChange("login")}
          >
            –í–µ—Ä–Ω—É—Ç—å—Å—è –∫–æ –≤—Ö–æ–¥—É
          </span>
        </div>
      );
    }
    return (
      <form className="flex flex-col gap-[2.5vh] text-[1.8vh] p-[1vw]" onSubmit={handleRegisterFormSubmit}>
        <label className="flex flex-col gap-[0.5vh]">
          <span className="text-[#d3d3d3] font-semibold">–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</span>
          <input
            type="text"
            name="username"
            value={registerFormData.username}
            onChange={handleRegisterFormInputChange}
            placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
            className={inputClass}
            required
          />
          <span className="text-[1.4vh] text-[#818181]">
            –õ–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, –æ—Ç 3 –¥–æ 15 —Å–∏–º–≤–æ–ª–æ–≤.
          </span>
        </label>

        <label className="flex flex-col gap-[0.5vh]">
          <span className="text-[#d3d3d3] font-semibold">–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞</span>
          <input
            type="email"
            name="email"
            value={registerFormData.email}
            onChange={handleRegisterFormInputChange}
            placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É"
            className={inputClass}
            required
          />
          <span className="text-[1.4vh] text-[#818181]">
            –§–æ—Ä–º–∞—Ç: example@mail.com.
          </span>
        </label>

        <label className="flex flex-col gap-[0.5vh]">
          <span className="text-[#d3d3d3] font-semibold">–ü–∞—Ä–æ–ª—å</span>
          <div className="relative">
            <input
              type={showPassword ? "text" : "password"}
              name="password"
              value={registerFormData.password}
              onChange={handleRegisterFormInputChange}
              placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å"
              className={inputClass}
              required
            />
            <span
              className="absolute top-1/2 right-[1vh] -translate-y-1/2 cursor-pointer text-white text-[1.8vh] select-none"
              onMouseDown={() => setShowPassword(true)}
              onMouseUp={() => setShowPassword(false)}
              onMouseLeave={() => setShowPassword(false)}
              onTouchStart={() => setShowPassword(true)}
              onTouchEnd={() => setShowPassword(false)}
            >
              {showPassword ? "üôâ" : "üôà"}
            </span>
          </div>
          <span className="text-[1.4vh] text-[#818181]">
            –î–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 1 –∑–∞–≥–ª–∞–≤–Ω—É—é –±—É–∫–≤—É, 1 –ø—Ä–æ–ø–∏—Å–Ω—É—é, 1 —Ü–∏—Ñ—Ä—É, 1 —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª.
          </span>
        </label>

        <label className="flex flex-col gap-[0.5vh]">
          <span className="text-[#d3d3d3] font-semibold">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å</span>
          <div className="relative">
            <input
              type={showPassword ? "text" : "password"}
              name="confirmPassword"
              value={registerFormData.confirmPassword}
              onChange={handleRegisterFormInputChange}
              placeholder="–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å"
              className={inputClass}
              required
            />
            <span
              className="absolute top-1/2 right-[1vh] -translate-y-1/2 cursor-pointer text-white text-[1.8vh] select-none"
              onMouseDown={() => setShowPassword(true)}
              onMouseUp={() => setShowPassword(false)}
              onMouseLeave={() => setShowPassword(false)}
              onTouchStart={() => setShowPassword(true)}
              onTouchEnd={() => setShowPassword(false)}
            >
              {showPassword ? "üôâ" : "üôà"}
            </span>
          </div>
        </label>

        <label className="flex flex-col gap-[0.5vh]">
          <span className="text-[#d3d3d3] font-semibold">–†–æ–ª—å</span>
          <select
            name="role"
            value={registerFormData.role}
            onChange={handleRegisterFormInputChange}
            className={inputClass}
          >
            <option value="Student">–£—á–µ–Ω–∏–∫</option>
            <option value="Coach">–¢—Ä–µ–Ω–µ—Ä</option>
          </select>
        </label>

        <button
          disabled={isLoading}
          type="submit"
          className={`${baseButtonClass} ${
            isLoading
              ? disabledButtonClass
              : isRegisterFormComplete
              ? enabledButtonClass
              : disabledButtonClass
          }`}
        >
          –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
        </button>

        <span
          className="hover:text-[#c4c4c4] cursor-pointer text-[1.7vh] text-[#aaaaaa]"
          onClick={() => handleCurrentViewChange("login")}
        >
          –£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç?
        </span>
      </form>
    );
  };

  const renderRecoveryForm = () => {
    if (recoverySuccess) {
      return (
        <div className="flex flex-col gap-[2.5vh] text-[1.8vh] p-[1vw]">
          <div className="text-green-500 text-[1.7vh]">{recoverySuccess}</div>
          <span
            className="hover:text-[#c4c4c4] cursor-pointer text-[1.7vh] text-[#818181]"
            onClick={() => handleCurrentViewChange("login")}
          >
            –í–µ—Ä–Ω—É—Ç—å—Å—è –∫–æ –≤—Ö–æ–¥—É
          </span>
        </div>
      );
    }
    return (
      <form className="flex flex-col gap-[2.5vh] text-[1.8vh] p-[1vw]" onSubmit={handleRecoveryFormSubmit}>
        <label className="flex flex-col gap-[0.5vh]">
          <span className="text-[#d3d3d3] font-semibold">–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞</span>
          <input
            type="email"
            name="email"
            value={recoveryFormData.email}
            onChange={handleRecoveryFormInputChange}
            placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É"
            className={inputClass}
            required
          />
        </label>
        <button
          disabled={isLoading}
          type="submit"
          className={`${baseButtonClass} ${
            isLoading
              ? disabledButtonClass
              : isRecoveryFormComplete
              ? enabledButtonClass
              : disabledButtonClass
          }`}
        >
          –°–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å
        </button>
        <span
          className="hover:text-[#c4c4c4] cursor-pointer text-[1.7vh] text-[#818181]"
          onClick={() => handleCurrentViewChange("login")}
        >
          –í–µ—Ä–Ω—É—Ç—å—Å—è –∫–æ –≤—Ö–æ–¥—É
        </span>
      </form>
    );
  };

  return (
    <Modal
      title={
        currentView === "login"
          ? "–í–æ–π—Ç–∏"
          : currentView === "register"
          ? "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"
          : "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è"
      }
      description={
        currentView === "login"
          ? "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É –∏ –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞."
          : currentView === "register"
          ? "–°–æ–∑–¥–∞–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º."
          : recoverySuccess
          ? ""
          : "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è."
      }
      isOpen={isOpen}
      error={error}
      onClose={() => onClose()}
    >
      {currentView === "login" && renderLoginForm()}
      {currentView === "register" && renderRegisterForm()}
      {currentView === "recovery" && renderRecoveryForm()}
    </Modal>
  );
};
